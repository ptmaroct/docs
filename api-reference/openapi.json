{
  "openapi": "3.0.3",
  "info": {
    "title": "Vortex Agent API",
    "description": "Complete API collection for the GitHub Agent - a TypeScript-based service that provides standardized GitHub repository operations.\n\n## Authentication\n- **GitHub Token**: Set in Authorization header as `Bearer {github_token}` (GitHub Personal Access Token)\n\n## Available Tools\n1. **listRepositories** - List user repositories\n2. **listFiles** - Browse repository files\n3. **readFile** - Read file contents\n4. **createOrUpdateFile** - Create/update files (requires confirmation)\n5. **deleteFile** - Delete files (requires confirmation)\n6. **patchFile** - Patch file contents (requires confirmation)\n7. **search** - Search for code in indexed repositories\n8. **createBranch** - Create new branches\n9. **createPullRequest** - Create pull requests\n10. **getUserContext** - Get user context",
    "version": "1.0.0",
    "contact": {
      "name": "GitHub Agent API"
    }
  },
  "servers": [
    {
      "url": "https://domywork.online",
      "description": "Production"
    },
    {
      "url": "http://localhost:3000",
      "description": "Local Development"
    }
  ],
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "GitHub Personal Access Token",
        "description": "GitHub Personal Access Token with repo and user scopes"
      }
    }
  },
  "paths": {
    "/health": {
      "get": {
        "tags": [
          "Health & Discovery"
        ],
        "summary": "Health Check",
        "description": "Check if the API is running and healthy.",
        "security": [],
        "responses": {
          "200": {
            "description": "API is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "GitHub Agent API is running!"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tools": {
      "get": {
        "tags": [
          "Health & Discovery"
        ],
        "summary": "Get Available Tools",
        "description": "Retrieve the list of all available GitHub tools with their parameters and descriptions.",
        "security": [],
        "responses": {
          "200": {
            "description": "List of available tools",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tools": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "parameters": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tools/listRepositories": {
      "post": {
        "tags": [
          "Repository Management"
        ],
        "summary": "List Repositories",
        "description": "List repositories for the authenticated GitHub user with optional filtering and pagination.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "visibility": {
                    "type": "string",
                    "enum": [
                      "all",
                      "public",
                      "private"
                    ],
                    "default": "all",
                    "description": "Repository visibility filter"
                  },
                  "sort": {
                    "type": "string",
                    "enum": [
                      "created",
                      "updated",
                      "pushed",
                      "full_name"
                    ],
                    "default": "updated",
                    "description": "Sort repositories by"
                  },
                  "direction": {
                    "type": "string",
                    "enum": [
                      "asc",
                      "desc"
                    ],
                    "default": "desc",
                    "description": "Sort direction"
                  },
                  "per_page": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 100,
                    "default": 30,
                    "description": "Number of repositories per page"
                  },
                  "page": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 1,
                    "description": "Page number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of repositories"
          },
          "401": {
            "description": "Authentication required"
          }
        }
      }
    },
    "/tools/listFiles": {
      "post": {
        "tags": [
          "File Operations"
        ],
        "summary": "List Files in Repository",
        "description": "List files and directories in the repository.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "owner",
                  "repo"
                ],
                "properties": {
                  "owner": {
                    "type": "string",
                    "description": "Repository owner (username or organization)"
                  },
                  "repo": {
                    "type": "string",
                    "description": "Repository name"
                  },
                  "path": {
                    "type": "string",
                    "default": "",
                    "description": "Path to list files from (optional, defaults to root)"
                  },
                  "ref": {
                    "type": "string",
                    "description": "Git reference (branch, tag, or commit SHA)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of files and directories"
          },
          "404": {
            "description": "Repository or path not found"
          }
        }
      }
    },
    "/tools/readFile": {
      "post": {
        "tags": [
          "File Operations"
        ],
        "summary": "Read File Content",
        "description": "Read the contents of a specific file.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "owner",
                  "repo",
                  "path"
                ],
                "properties": {
                  "owner": {
                    "type": "string",
                    "description": "Repository owner (username or organization)"
                  },
                  "repo": {
                    "type": "string",
                    "description": "Repository name"
                  },
                  "path": {
                    "type": "string",
                    "description": "File path"
                  },
                  "ref": {
                    "type": "string",
                    "description": "Git reference (branch, tag, or commit SHA)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File content"
          },
          "404": {
            "description": "File not found"
          }
        }
      }
    },
    "/tools/createOrUpdateFile": {
      "post": {
        "tags": [
          "File Modifications"
        ],
        "summary": "Create or Update File",
        "description": "Create a new file or update an existing file. ⚠️ This operation requires confirmation and will make a real commit.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "owner",
                  "repo",
                  "path",
                  "message",
                  "content"
                ],
                "properties": {
                  "owner": {
                    "type": "string",
                    "description": "Repository owner (username or organization)"
                  },
                  "repo": {
                    "type": "string",
                    "description": "Repository name"
                  },
                  "path": {
                    "type": "string",
                    "description": "File path"
                  },
                  "message": {
                    "type": "string",
                    "description": "Commit message"
                  },
                  "content": {
                    "type": "string",
                    "description": "File content"
                  },
                  "sha": {
                    "type": "string",
                    "description": "Current file SHA (required for updates)"
                  },
                  "branch": {
                    "type": "string",
                    "default": "main",
                    "description": "Target branch"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File created or updated successfully"
          },
          "409": {
            "description": "File already exists or SHA mismatch"
          }
        }
      }
    },
    "/tools/deleteFile": {
      "post": {
        "tags": [
          "File Modifications"
        ],
        "summary": "Delete File",
        "description": "Delete a file from the repository. The file's SHA is automatically fetched before deletion. ⚠️ This operation requires confirmation and cannot be undone.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "owner",
                  "repo",
                  "path",
                  "message"
                ],
                "properties": {
                  "owner": {
                    "type": "string",
                    "description": "Repository owner (username or organization)"
                  },
                  "repo": {
                    "type": "string",
                    "description": "Repository name"
                  },
                  "path": {
                    "type": "string",
                    "description": "File path"
                  },
                  "message": {
                    "type": "string",
                    "description": "Commit message"
                  },
                  "ref": {
                    "type": "string",
                    "description": "Git reference to read from (branch, tag, or commit SHA)"
                  },
                  "branch": {
                    "type": "string",
                    "default": "main",
                    "description": "Target branch"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File deleted successfully"
          },
          "404": {
            "description": "File not found"
          }
        }
      }
    },
    "/tools/patchFile": {
      "post": {
        "tags": [
          "File Modifications"
        ],
        "summary": "Patch File",
        "description": "Apply a partial update to a file by replacing specific lines. Similar to how code editors apply patches. The file's SHA is automatically fetched before applying the patch. ⚠️ This operation requires confirmation and will make a real commit.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "owner",
                  "repo",
                  "path",
                  "message",
                  "startLine",
                  "endLine",
                  "newContent"
                ],
                "properties": {
                  "owner": {
                    "type": "string",
                    "description": "Repository owner (username or organization)"
                  },
                  "repo": {
                    "type": "string",
                    "description": "Repository name"
                  },
                  "path": {
                    "type": "string",
                    "description": "File path"
                  },
                  "message": {
                    "type": "string",
                    "description": "Commit message for the patch"
                  },
                  "startLine": {
                    "type": "number",
                    "description": "Starting line number (1-indexed)"
                  },
                  "endLine": {
                    "type": "number",
                    "description": "Ending line number (1-indexed, inclusive)"
                  },
                  "newContent": {
                    "type": "string",
                    "description": "New content to replace the specified line range"
                  },
                  "ref": {
                    "type": "string",
                    "description": "Git reference to read from (branch, tag, or commit SHA)"
                  },
                  "branch": {
                    "type": "string",
                    "default": "main",
                    "description": "Target branch for the commit"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File patched successfully"
          },
          "400": {
            "description": "Invalid line numbers or patch parameters"
          },
          "404": {
            "description": "File not found"
          },
          "409": {
            "description": "Conflict while updating file"
          }
        }
      }
    },
    "/tools/createBranch": {
      "post": {
        "tags": [
          "Branch Management"
        ],
        "summary": "Create Branch",
        "description": "Create a new branch in a repository. The new branch will be created from the specified source branch or the repository's default branch if no source is specified.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "owner",
                  "repo",
                  "newBranch"
                ],
                "properties": {
                  "owner": {
                    "type": "string",
                    "description": "Repository owner (username or organization)"
                  },
                  "repo": {
                    "type": "string",
                    "description": "Repository name"
                  },
                  "newBranch": {
                    "type": "string",
                    "description": "Name of the new branch to create"
                  },
                  "sourceBranch": {
                    "type": "string",
                    "description": "Source branch to create the new branch from (optional, defaults to repository's default branch)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Branch created successfully"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Repository or source branch not found"
          },
          "422": {
            "description": "Branch already exists or invalid branch name"
          }
        }
      }
    },
    "/tools/createPullRequest": {
      "post": {
        "tags": [
          "Pull Request Management"
        ],
        "summary": "Create Pull Request",
        "description": "Create a pull request to merge changes from one branch into another. The head branch must contain commits that are not in the base branch.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "owner",
                  "repo",
                  "title",
                  "head",
                  "base"
                ],
                "properties": {
                  "owner": {
                    "type": "string",
                    "description": "Repository owner (username or organization)"
                  },
                  "repo": {
                    "type": "string",
                    "description": "Repository name"
                  },
                  "title": {
                    "type": "string",
                    "description": "Title of the pull request"
                  },
                  "head": {
                    "type": "string",
                    "description": "The name of the branch where your changes are implemented (source branch)"
                  },
                  "base": {
                    "type": "string",
                    "description": "The name of the branch you want the changes pulled into (target branch, usually 'main' or 'master')"
                  },
                  "body": {
                    "type": "string",
                    "description": "Body/description of the pull request (optional)"
                  },
                  "draft": {
                    "type": "boolean",
                    "description": "Whether to create the pull request as a draft (optional, defaults to false)",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pull request created successfully"
          },
          "403": {
            "description": "Access denied or insufficient permissions"
          },
          "404": {
            "description": "Repository or branch not found"
          },
          "422": {
            "description": "Invalid pull request parameters"
          }
        }
      }
    },
    "/resource": {
      "post": {
        "tags": [
          "User Context"
        ],
        "summary": "Get User Context",
        "description": "Get contextual information about the authenticated user, including profile details and recent repositories.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User context information"
          },
          "401": {
            "description": "Authentication required"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Health & Discovery",
      "description": "Basic endpoints for health checking and tool discovery."
    },
    {
      "name": "Repository Management",
      "description": "Operations for managing and browsing GitHub repositories."
    },
    {
      "name": "File Operations",
      "description": "Operations for browsing and reading files in repositories."
    },
    {
      "name": "File Modifications",
      "description": "⚠️ Destructive operations for creating, updating, and deleting files."
    },
    {
      "name": "User Context",
      "description": "Endpoint for retrieving user profile and contextual information."
    },
    {
      "name": "Branch Management",
      "description": "Operations for creating and managing branches in repositories."
    },
    {
      "name": "Pull Request Management",
      "description": "Operations for creating and managing pull requests."
    }
  ]
}